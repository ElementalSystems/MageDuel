let bcurves={
  B: {
    0: "M-3,20 Q0,10 2,20 M-2,20 Q0,20 2,20 M-2,20 Q0,30 3,20", //bolt start
    1: "M-22,16 Q-1,22 20,16 M-25,20 Q-1,19 25,20 M-23,24 Q-1,18 21,24", //bolt active 1
    2: "M-20,18 Q14,9 20,16 M-25,20 Q-16,9 25,20 M-24,24 Q-1,20 21,22", //bolt active 2
    3: "M-13,8 Q0,27 20,7 M-17,11 Q2,16 -4,28 M1,31 Q-1,6 21,11", //bolt exploded
  },
  S: {
    0: "M-5,20 Q-18,26 -5,30 M-10,20 Q-1,24 -10,30 M0,20 Q-15,24 0,30", //starting
    1: "M-5,11 Q30,30 -5,50 M-10,11 Q30,30 -10,50 M0,11 Q30,30 0,50", //shield settled 1
    2: "M-5,11 Q30,30 -5,50 M-10,11 Q30,30 -10,50 M0,11 Q30,30 0,50", //shield settled 2
    3: "M-5,11 Q10,38 -5,50 M-10,11 Q19,20 -10,50 M0,11 Q-4,22 0,50", //shield hit
  },
  A: {
    //bottoms
    1: "M1,76 Q10,74 17,82 M16,80 Q21,85 19,92  M22,93 Q21,99 27,98 M27,72 Q30,85 23,93 M10,64 Q17,64 28,74 M-11,64 Q-1,70 11,64 M-12,64 Q-17,70 -24,75 M-32,93 Q-25,85 -24,75 M-28,96 Q-31,96 -35,99 M-24,97 Q-21,88 -12,82 M-14,81 Q-7,76 1,76 ",//standing
    2: "M0,71 Q5,76 15,76 M16,75 Q19,83 15,92  M15,93 Q15,99 25,97 M24,72 Q25,83 19,93 M10,64 Q17,67 24,71 M-11,64 Q-1,70 11,64 M-12,64 Q-17,70 -22,77 M-41,89 Q-30,83 -22,77 M-44,93 Q-45,98 -38,97 M-36,94 Q-29,92 -14,81 M-14,81 Q-7,76 -1,70 ",//stepping
    3: "M0,56 Q5,58 15,61 M15,61 Q28,68 40,69  M42,64 Q47,65 47,70 M24,57 Q32,58 40,63 M10,49 Q17,52 24,56 M-11,49 Q-1,55 11,49 M-10,51 Q-19,55 -20,57 M-11,67 Q-24,63 -21,57 M-5,62 Q-4,67 -11,70 M-7,59 Q-9,59 -9,62 M-7,59 Q-7,61 -1,55 ",//down
    4: "M0,56 Q1,58 9,58 M11,57 Q16,58 8,62  M9,63 Q6,64 19,65 M24,57 Q32,58 12,64 M10,49 Q17,52 24,56 M-11,49 Q-1,55 11,49 M-10,51 Q-19,55 -20,57 M-11,67 Q-24,63 -21,57 M-5,62 Q-4,67 -11,70 M-7,59 Q-9,59 -9,62 M-7,59 Q-7,61 -1,55  ",//down tight
    8: "M-4,78 Q10,74 9,82 M12,81 Q11,84 15,87  M18,87 Q21,99 18,95 M21,74 Q17,79 23,93 M10,64 Q10,67 20,76 M-6,62 Q-1,70 11,64 M-7,67 Q-13,65 -19,76 M-27,91 Q-21,81 -24,75 M-26,97 Q-31,96 -30,88 M-26,92 Q-21,92 -12,82 M-14,81 Q-7,76 1,76",//hit broken

    //torso
    101: "M9,41 Q3,48 4,57 M-9,35 Q-3,34 7,40 M-8,37 Q-12,49 -11,55 M-9,38 Q-33,61 -7,60 M-5,60 Q-5,55 -1,54 M6,41 Q11,51 28,43 M29,42 Q27,37 30,34 ", //guard
    102: "M4,40 Q3,48 6,57 M-11,34 Q-3,34 5,40 M-11,33 Q-15,40 -11,55 M-9,38 Q-20,27 -30,23 M-32,23 Q-38,23 -37,31 M7,41 Q13,51 24,61 M27,62 Q30,62 33,67 ",//spread
    103: "M6,37 Q3,48 6,57 M-9,37 Q-3,34 4,35 M-6,36 Q-12,49 -11,55 M-9,38 Q-8,46 20,38 M22,36 Q21,32 23,28 M1,37 Q18,46 26,40 M25,38 Q26,30 29,28 ",//push
    104: "M4,40 Q3,48 6,57 M-11,34 Q-3,34 5,40 M-11,33 Q-15,40 -11,55 M-10,37 Q6,10 20,21 M23,21 Q21,16 26,13 M7,41 Q7,51 23,54 M26,54 Q23,54 26,59 ",//wide push
    108: "M1,42 Q-2,45 6,57 M-11,34 Q-3,34 0,43 M-11,33 Q-7,39 -11,55 M-9,38 Q-16,44 -4,56 M-4,59 Q-6,60 0,61 M1,40 Q5,51 14,44 M15,39 Q12,34 14,31 ",//hit broken
    //hats
    201: "M-8,29 Q5,28 15,24 M15,23 Q9,23 7,21 M8,24 Q3,19 0,13 M0,13 Q-4,7 -9,5 M-5,15 Q-4,7 -9,5 M-5,15 Q-5,19 -4,25 M-2,22 Q-3,25 -9,28",//hat - idle
    202: "M-8,29 Q7,25 14,28 M14,27 Q14,24 7,23 M8,24 Q3,19 0,13 M0,13 Q-4,7 1,4 M-5,15 Q-4,7 1,3 M-5,15 Q-5,19 -4,25 M-2,22 Q-3,25 -9,28",//hat forward a bit
    203: "M-10,35 Q9,26 11,16 M11,15 Q9,15 1,20 M2,18 Q-1,15 -2,11 M-2,11 Q-10,1 -23,15 M-10,17 Q-12,10 -26,17 M-10,16 Q-5,19 -7,24 M-6,23 Q-3,25 -10,34",//hat swept back
    208: "M-10,24 Q17,31 16,35 M20,31 Q11,29 7,23 M6,25 Q3,19 4,11 M6,13 Q-4,7 -4,0 M-9,13 Q-4,7 1,3 M-9,13 Q-13,15 -8,19 M-7,19 Q-3,25 -11,25",//hat broken


  },
  //cards
  J:{ 1: "M-13,97 Q-20,59 7,27 M11,24 Q12,41 27,53  M12,22 Q-6,39 -30,35" },
  F:{ 1: "M-35,60 Q-12,63 29,60 M41,60 Q9,53 7,41  M41,62 Q17,65 11,78 M21,60 Q-4,54 -13,41  M21,62 Q1,66 -9,78" },
  D:{ 1: "M-6,28 Q-12,63 4,88 M8,92 Q1,72 13,63  M3,91 Q-10,82 -21,79" },

}

let curves={

}

function preProcessCurves() {
  let ppce=(el)=>{
    let r={};
    Object.keys(el).forEach(key=>{r[key]={ curve:brushCurve(encodeCurve(el[key]))};})
    return r;
  }
  Object.keys(bcurves).forEach(key=> curves[key]=ppce(bcurves[key]));
}

preProcessCurves();

function setCurve(go,i,c) {
  go.pels[i].setAttribute('d', decodeCurve(c));
}

function brushCurve(c) //brushes curves by sets of three points
{
  let n=[];
  let xo=1.5,yo=3;
  for (let i=0;i<c.length;i+=3) {
    n.push(
           c[i],
           c[i+1],
           c[i+2],
           {l: 'L', x: c[i+2].x+xo, y: c[i+2].y+yo},
           {l: 'Q', x: c[i+1].x+xo*.8, y: c[i+1].y+yo*.8},
           {l: ' ', x: c[i].x, y: c[i].y},
         );

  }
  //n.push({l:'Z', x:0, y:0});
  return n;
}


function iCurve(r,s, e) {
  let ir = 1 - r;

  return s.map((p, i) => ({
    l: p.l,
    x: (p.x * ir + e[i].x * r),
    y: (p.y * ir + e[i].y * r)
  }));
}


const pathRegex = /([M QTZL]+)(-?\d+),(-?\d+)/g;

function decodeCurve(c)
{
  return c.map(e=>e.l+e.x+","+e.y).join('');
}

function encodeCurve(path) {
  const pathRegex = /([M QTZL]+)(-?\d+),(-?\d+)/g;
  //do the regex - dump into an array lead: x: y:
  let a;
  let r = [];
  while (a = pathRegex.exec(path)) {
    r.push({
      l: a[1],
      x: +a[2],
      y: +a[3]
    });
  }
  return r;
}
